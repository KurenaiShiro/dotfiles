<MonoDevelopProperties version="2.0">
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.AddConstructorParametersFromMembers.AddConstructorParametersFromMembersCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.AddFileBanner.CSharpAddFileBannerCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.CodeRefactorings.InlineTemporary.InlineTemporaryCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertAutoPropertyToFullProperty.CSharpConvertAutoPropertyToFullPropertyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertIfToSwitch.CSharpConvertIfToSwitchCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertNumericLiteral.CSharpConvertNumericLiteralCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertToInterpolatedString.CSharpConvertConcatenationToInterpolatedStringRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertToInterpolatedString.CSharpConvertPlaceholderToInterpolatedStringRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.InitializeParameter.CSharpAddParameterCheckCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.InitializeParameter.CSharpInitializeMemberFromParameterCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.MoveDeclarationNearReference.CSharpMoveDeclarationNearReferenceCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ReplaceDocCommentTextWithTag.CSharpReplaceDocCommentTextWithTagCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.UseExpressionBody.UseExpressionBodyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.UseNamedArguments.CSharpUseNamedArgumentsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.ChangeSignature.ChangeSignatureCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CodeRefactorings.GenerateDefaultConstructors.GenerateDefaultConstructorsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CodeRefactorings.GenerateFromMembers.AddConstructorParameters.AddConstructorParametersCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CodeRefactorings.GenerateFromMembers.GenerateConstructorFromMembers.GenerateConstructorFromMembersCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CodeRefactorings.IntroduceVariable.IntroduceVariableCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CodeRefactorings.MoveType.MoveTypeCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.EncapsulateField.EncapsulateFieldRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.ExtractInterface.ExtractInterfaceCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.GenerateConstructorFromMembers.GenerateConstructorFromMembersCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.GenerateDefaultConstructors.GenerateDefaultConstructorsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.GenerateEqualsAndGetHashCodeFromMembers.GenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.GenerateOverrides.GenerateOverridesCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.ReplaceMethodWithProperty.ReplaceMethodWithPropertyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.ReplacePropertyWithMethods.ReplacePropertyWithMethodsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.MonoDevelop.CSharp.CodeRefactorings.IntroduceVariable.SortAndRemoveImportsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.MonoDevelop.CSharp.CodeRefactorings.IntroduceVariable.SortImportsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.MonoDevelop.RegexToolkit.CodeRefactorings.ValidateActionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.AddNullCheckCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddAnotherAccessorCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddBracesCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddCatchExceptionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddExceptionDescriptionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddNameToArgumentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddNewFormatItemCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddOptionalParameterToInvocationCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AutoLinqSumAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ChangeAccessModifierAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckArrayIndexValueCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckCollectionIndexValueCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckDictionaryKeyValueCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckIfParameterIsNullCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckStringBuilderIndexValueCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckStringIndexValueCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ComputeConstantValueCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ContractEnsuresNotNullReturnCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ContractRequiresNotNullCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ContractRequiresStringNotNullOrEmptyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertAnonymousMethodToLambdaCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertAutoPropertyToPropertyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertBitwiseFlagComparisonToHasFlagsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertCoalescingToConditionalExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertDecToHexCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertDoWhileToWhileLoopCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertEqualityOperatorToEqualsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertEqualityOperatorToReferenceEqualsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertEqualsToEqualityOperatorCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertExplicitToImplicitImplementationCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertExpressionBodyToStatementBodyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertForToWhileCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertForeachToForCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertHasFlagsToBitwiseFlagComparisonCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertHexToDecCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertIfStatementToConditionalTernaryExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertIfStatementToNullCoalescingExpressionAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertIfStatementToReturnStatementAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertIfStatementToSwitchStatementCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertImplicitToExplicitImplementationCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertInterpolatedStringToStringFormatCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertLambdaBodyExpressionToStatementCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertLambdaStatementToExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertLambdaToAnonymousMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertMethodGroupToAnonymousMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertMethodGroupToLambdaCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertMultiplyToShiftCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertReferenceEqualsToEqualityOperatorCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertShiftToMultiplyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertStatementBodyToExpressionBodyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertStringFormatToInterpolatedStringCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertSwitchToIfCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertTernaryExpressionToIfStatementCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertWhileToDoWhileLoopCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CopyCommentsFromBaseCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateChangedEventCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateCustomEventImplementationAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateDelegateAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateEventInvocatorCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateOverloadWithoutParameterCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ExtractAnonymousMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ExtractWhileConditionToInternalIfStatementCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.FlipEqualsTargetAndArgumentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.FlipOperatorArgumentsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.FlipRelationalOperatorArgumentsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.GenerateGetterAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.GenerateSwitchLabelsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ImportStaticClassWithUsingCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InitializeAutoPropertyFromConstructorParameterCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InitializeFieldFromConstructorParameterCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InitializeReadOnlyAutoPropertyFromConstructorParameterCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InsertAnonymousMethodSignatureCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InvertConditionalOperatorCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InvertIfCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InvertLogicalExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InvokeAsStaticMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.IterateViaForeachAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.JoinLocalVariableDeclarationAndAssignmentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.JoinStringCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.MergeNestedIfAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.NegateIsExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.NegateLogicalExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.PutInsideUsingAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.RemoveBracesCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.RemoveCatchExceptionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.RemoveRegionEndRegionDirectivesCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceAssignmentWithPostfixExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceAutoPropertyWithPropertyAndBackingFieldCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceDirectCastWithSafeCastCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceExplicitTypeWithVarCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceOperatorAssignmentWithAssignmentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplacePostfixExpressionWithAssignmentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplacePropertyWithBackingFieldWithAutoPropertyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceSafeCastWithDirectCastCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceVarWithExplicitTypeCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceWithOperatorAssignmentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReverseDirectionForForLoopCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitDeclarationListCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitIfWithAndConditionInTwoCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitIfWithOrConditionInTwoCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitLocalVariableDeclarationAndAssignmentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitStringCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ToAbstractVirtualNonVirtualConversionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.UseAsAndNullCheckCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.UseStringFormatAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.UseSystemEnvironmentNewLineCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.UseSystemStringEmptyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.ConvertInstanceToStaticMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.ConvertUnitTestToVB" value="True" />
  <Property key="DotNetCore.DismissedSurveysList" />
  <Property key="FavoriteRecentFiles" />
  <Property key="MonoDevelop.Core.InstallUuid" value="f2dc5daf-cda1-446a-bd52-c2dd13c457fc" />
  <Property key="MonoDevelop.Core.LastRunRevision" value="5" />
  <Property key="MonoDevelop.Core.LastRunVersion" value="7.0.1" />
  <Property key="MonoDevelop.DesignerSupport.ClassOutline.GroupOrder" value="" />
  <Property key="MonoDevelop.DesignerSupport.ClassOutline.IsGrouped" value="False" />
  <Property key="MonoDevelop.DesignerSupport.ClassOutline.IsSorted" value="False" />
  <Property key="MonoDevelop.GtkCore.ShowNonContainerWarning" value="True" />
  <Property key="MonoDevelop.Ide.AddinUpdater.LastCheck" value="07/03/2019 17:51:31" />
  <Property key="MonoDevelop.Ide.ExtensibleTreeView.Zoom.MonoDevelop.UnitTesting.TestPad" value="1" />
  <Property key="Monodevelop.CommentTasksColumns" value="TRUE;TRUE;TRUE;TRUE" />
  <Property key="Monodevelop.TaskList.ActiveView" value="MonoDevelop.Ide.Tasks.CommentTasksView" />
  <Property key="ScrollBar.Mode" value="Overview" />
  <Property key="SharpDevelop.Workbench.WorkbenchMemento">
    <Property key="bounds" value="12, 30, 1421, 817" />
    <Property key="fullscreen" value="False" />
    <Property key="windowState" value="0" />
  </Property>
  <Property key="ToolboxIsInCompactMode" value="False" />
  <Property key="Xamarin.Live.Player.Enabled" value="False" />
  <Property key="XmlEditor.AddIn.Options">
    <Property key="AutoInsertFragment" value="False" />
    <Property key="ShowSchemaAnnotation" value="False" />
    <Property key="AutoCompleteElements" value="False" />
  </Property>
</MonoDevelopProperties>